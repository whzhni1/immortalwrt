name: Codespaces 菜单配置模式

on:
  workflow_dispatch:
    inputs:
      REPO_VERSION:
        description: '输入 ImmortalWrt 版本（如 v24.10.2）'
        required: false
        default: 'v24.10'
        type: string
      CONFIG_NAME:
        description: '配置文件名（不含.config后缀）'
        required: true
        default: 'my-config'
        type: string
      LOAD_CUSTOM_FEEDS:
        description: '加载自定义插件库（执行part1.sh）'
        required: false
        default: false
        type: boolean

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  TZ: Asia/Shanghai

jobs:
  codespaces-menuconfig:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
    - name: 检查项目分支
      uses: actions/checkout@main

    - name: 设置变量
      run: |
        REPO_VERSION="${{ github.event.inputs.REPO_VERSION || 'v24.10' }}"
        CONFIG_NAME="${{ github.event.inputs.CONFIG_NAME }}"
        LOAD_CUSTOM_FEEDS="${{ github.event.inputs.LOAD_CUSTOM_FEEDS }}"
        
        echo "REPO_BRANCH=$REPO_VERSION" >> $GITHUB_ENV
        echo "CONFIG_NAME=$CONFIG_NAME" >> $GITHUB_ENV
        echo "LOAD_CUSTOM_FEEDS=$LOAD_CUSTOM_FEEDS" >> $GITHUB_ENV
        
        echo "使用版本: $REPO_VERSION"
        echo "配置文件名: $CONFIG_NAME.config"
        echo "加载自定义插件库: $LOAD_CUSTOM_FEEDS"

    - name: 安装编译环境
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libncurses5-dev \
          git \
          python3 \
          python3-pip \
          rsync \
          file \
          unzip \
          wget \
          curl \
          time

    - name: 下载 ImmortalWrt 源码
      run: |
        echo "正在克隆 ImmortalWrt 源码..."
        echo "版本: $REPO_BRANCH"
        
        if git clone --depth 1 "$REPO_URL" -b "$REPO_BRANCH" ImmortalWrt; then
          echo "✅ 源码克隆成功"
        else
          echo "⚠️  指定版本不存在，使用默认分支"
          git clone --depth 1 "$REPO_URL" ImmortalWrt
          cd ImmortalWrt
          DEFAULT_BRANCH=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
          echo "实际使用分支: $DEFAULT_BRANCH"
          echo "REPO_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV
          cd ..
        fi
        
        echo "源码大小: $(du -sh ImmortalWrt | cut -f1)"

    - name: 加载自定义插件库
      if: env.LOAD_CUSTOM_FEEDS == 'true'
      run: |
        echo "加载自定义插件库..."
        if [ -f "part1.sh" ]; then
          chmod +x part1.sh
          cd ImmortalWrt
          ../part1.sh
          echo "✅ 自定义插件库加载完成"
        else
          echo "⚠️  未找到 part1.sh 文件"
        fi

    - name: 更新并安装 feeds
      run: |
        cd ImmortalWrt
        echo "更新 feeds..."
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        echo "✅ feeds 更新完成"

    - name: 创建交互式配置脚本
      run: |
        cat > interactive-menuconfig.sh << 'EOF'
#!/bin/bash
set -e

echo "=========================================="
echo "       ImmortalWrt 菜单配置工具"
echo "=========================================="
echo "版本: $REPO_BRANCH"
echo "配置将保存为: $CONFIG_NAME.config"
echo ""

cd ImmortalWrt

if [ -f .config ]; then
  echo "发现现有配置，创建备份..."
  cp .config .config.backup
  echo "✅ 原配置已备份为 .config.backup"
fi

echo "正在启动 menuconfig..."
echo "请按以下步骤操作："
echo "1. 选择 Target System → MediaTek Ralink ARM"
echo "2. 选择对应的 Subtarget 和 Target Profile"
echo "3. 选择需要的软件包"
echo "4. 按 ESC 退出，选择 Yes 保存配置"
echo ""

export TERM=xterm-256color
make menuconfig

if [ -f .config ]; then
  echo ""
  echo "✅ 配置保存成功！"
  echo "配置文件摘要:"
  echo "=========================================="
  
  DEVICE=$(grep -E "CONFIG_TARGET.*DEVICE.*=y" .config | head -1 | sed 's/CONFIG_TARGET_//' | sed 's/_DEVICE.*//' || echo "未知设备")
  echo "目标设备: $DEVICE"
  
  PACKAGE_COUNT=$(grep -c "CONFIG_PACKAGE.*=y" .config || echo "0")
  echo "选择的软件包: $PACKAGE_COUNT 个"
  
  cp .config "../$CONFIG_NAME.config"
  echo "✅ 配置文件已保存为: $CONFIG_NAME.config"
  
  echo ""
  echo "关键配置选项:"
  grep -E "^(CONFIG_TARGET|CONFIG_BUSYBOX|CONFIG_LUCI)" .config | head -10 || true
  
else
  echo "❌ 未检测到配置文件，请确保在 menuconfig 中选择了保存"
  exit 1
fi

echo "=========================================="
EOF

        chmod +x interactive-menuconfig.sh
        
        cat > USAGE.md << 'EOF'
# 菜单配置工具使用说明

## 快速开始

运行以下命令启动配置界面：

```bash
./interactive-menuconfig.sh
