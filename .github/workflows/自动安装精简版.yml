name: 自动安装精简版
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      REPO_VERSION:
        description: '选择 ImmortalWrt 版本 (格式: 24.10.2 或分支名)'
        required: true
        default: '24.10.2'
        type: string
      DEVICE_MODEL:
        description: '选择配置文件'
        required: true
        default: 'rax3000m'
        type: choice
        options:
          - rax3000m
          - ax6000
      LAN_IP:
        description: '设置LAN IP地址'
        required: true
        default: '192.168.1.1'
      FIX_VERMAGIC:
        description: '修复 vermagic 以兼容官方软件源'
        required: false
        default: true
        type: boolean
      UPLOAD_BIN_DIR:
        description: '上传bin目录'
        required: false
        default: false
        type: boolean
      UPLOAD_FIRMWARE:
        description: '上传固件到Artifacts'
        required: false
        default: true
        type: boolean
      UPLOAD_RELEASE:
        description: '发布固件到Release'
        required: false
        default: true
        type: boolean

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: part1.sh
  DIY_P2_SH: part2.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    
    steps:
    - name: 检查项目分支
      uses: actions/checkout@main

    - name: 初始化环境和变量
      run: |
        # 验证必要输入
        if [ -z "${{ github.event.inputs.REPO_VERSION }}" ] || [ -z "${{ github.event.inputs.DEVICE_MODEL }}" ]; then
          echo "❌ 错误：必须指定版本和设备型号"
          exit 1
        fi

        # 设置版本和设备变量
        REPO_VERSION="${{ github.event.inputs.REPO_VERSION }}"
        DEVICE_MODEL="${{ github.event.inputs.DEVICE_MODEL }}"
        
        # 设备映射
        case "$DEVICE_MODEL" in
          "rax3000m")
            DEVICE_NAME="cmcc_rax3000m"
            DEVICE_FULL_NAME="CMCC-RAX3000M"
            ;;
          "ax6000")
            DEVICE_NAME="jdcloud_re-cp-03" 
            DEVICE_FULL_NAME="JDCloud-AX6000"
            ;;
          *)
            echo "❌ 错误：不支持的设备型号: $DEVICE_MODEL"
            exit 1
            ;;
        esac

        # 设置环境变量
        cat >> $GITHUB_ENV << EOF
        REPO_VERSION=$REPO_VERSION
        DEVICE_MODEL=$DEVICE_MODEL
        DEVICE_NAME=$DEVICE_NAME
        DEVICE_FULL_NAME=$DEVICE_FULL_NAME
        CONFIG_FILE=${DEVICE_MODEL}.config
        FILE_DATE=$(date +"%Y.%m.%d-%H%M")
        EOF

        echo "======================================"
        echo "版本: $REPO_VERSION"
        echo "设备: $DEVICE_FULL_NAME"
        echo "配置文件: ${DEVICE_MODEL}.config"
        echo "======================================"

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -y \
          ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
          mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools \
          libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
          vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 清理磁盘空间
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: 下载源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        echo "正在克隆 ImmortalWrt 源码..."
        
        # 检测版本类型并克隆
        if git ls-remote --tags "$REPO_URL" | grep -q "refs/tags/$REPO_VERSION$"; then
          echo "✅ 检测到 Tag: $REPO_VERSION"
          git clone --depth 1 "$REPO_URL" -b "$REPO_VERSION" ImmortalWrt
        elif [[ "$REPO_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
          VERSION_WITH_V="v$REPO_VERSION"
          if git ls-remote --tags "$REPO_URL" | grep -q "refs/tags/$VERSION_WITH_V$"; then
            echo "✅ 检测到 Tag: $VERSION_WITH_V"
            git clone --depth 1 "$REPO_URL" -b "$VERSION_WITH_V" ImmortalWrt
            echo "REPO_VERSION=$VERSION_WITH_V" >> $GITHUB_ENV
          elif git ls-remote --heads "$REPO_URL" | grep -q "refs/heads/$REPO_VERSION$"; then
            echo "✅ 检测到 Branch: $REPO_VERSION"
            git clone --depth 1 "$REPO_URL" -b "$REPO_VERSION" ImmortalWrt
          else
            echo "❌ 错误：版本 '$REPO_VERSION' 不存在"
            exit 1
          fi
        elif git ls-remote --heads "$REPO_URL" | grep -q "refs/heads/$REPO_VERSION$"; then
          echo "✅ 检测到 Branch: $REPO_VERSION"
          git clone --depth 1 "$REPO_URL" -b "$REPO_VERSION" ImmortalWrt
        else
          echo "❌ 错误：版本 '$REPO_VERSION' 不存在"
          exit 1
        fi
        
        ln -sf /workdir/ImmortalWrt $GITHUB_WORKSPACE/ImmortalWrt
        cd ImmortalWrt
        
        echo "源码信息: $(git rev-parse --short HEAD)"

    - name: 加载配置并设置目标信息
      run: |
        echo "📋 加载配置文件并提取目标信息"
        
        if [ ! -f "${{ env.CONFIG_FILE }}" ]; then
          echo "❌ 错误：未找到配置文件 ${{ env.CONFIG_FILE }}"
          exit 1
        fi
        
        # 提取 TARGET 信息
        TARGET_LINE=$(grep "^CONFIG_TARGET_.*_DEVICE_.*=y" "${{ env.CONFIG_FILE }}" | head -1)
        if [ -n "$TARGET_LINE" ]; then
          TARGET_NAME=$(echo "$TARGET_LINE" | awk -F'_' '{print $3"_"$4}')
          TARGET_PATH=$(echo "$TARGET_NAME" | tr '_' '/')
          echo "TARGET_NAME=$TARGET_NAME" >> $GITHUB_ENV
          echo "TARGET_PATH=$TARGET_PATH" >> $GITHUB_ENV
        else
          echo "⚠️ 使用默认目标值"
          echo "TARGET_NAME=mediatek_filogic" >> $GITHUB_ENV
          echo "TARGET_PATH=mediatek/filogic" >> $GITHUB_ENV
        fi

    - name: 获取官方 vermagic
      if: ${{ github.event.inputs.FIX_VERMAGIC == 'true' }}
      run: |
        echo "🔍 获取官方 vermagic"
        
        cd ImmortalWrt
        CLEAN_VERSION=$(echo "${{ env.REPO_VERSION }}" | sed 's/^v//')
        KMODS_BASE_URL="https://downloads.immortalwrt.org/releases/$CLEAN_VERSION/targets/${{ env.TARGET_PATH }}/kmods/"
        
        KERNEL_DIR=$(wget -qO- "$KMODS_BASE_URL" | grep -oP '(?<=href=")[0-9.]+-[0-9]+-[0-9a-f]+(?=/)' | head -1)
        OFFICIAL_VERMAGIC=$(echo "$KERNEL_DIR" | grep -oE '[0-9a-f]{32}')
        
        if [ -n "$OFFICIAL_VERMAGIC" ]; then
          echo "$OFFICIAL_VERMAGIC" > .vermagic
          echo "KERNEL_DIR=$KERNEL_DIR" >> $GITHUB_ENV
          echo "OFFICIAL_VERMAGIC=$OFFICIAL_VERMAGIC" >> $GITHUB_ENV
          echo "VERMAGIC_STATUS=✅ 已获取" >> $GITHUB_ENV
        else
          echo "❌ 无法获取官方 vermagic"
          exit 1
        fi

    - name: 修改内核编译脚本
      if: ${{ github.event.inputs.FIX_VERMAGIC == 'true' && env.VERMAGIC_STATUS == '✅ 已获取' }}
      run: |
        echo "🔧 修改内核编译脚本"
        
        cd ImmortalWrt
        KERNEL_DEFAULTS_FILE="include/kernel-defaults.mk"
        
        if [ -f "$KERNEL_DEFAULTS_FILE" ]; then
          cp "$KERNEL_DEFAULTS_FILE" "${KERNEL_DEFAULTS_FILE}.backup"
          awk '/> \$(LINUX_DIR)\/\.vermagic/ {print "\tcp $(TOPDIR)/.vermagic $(LINUX_DIR)/.vermagic"; next} 1' \
            "$KERNEL_DEFAULTS_FILE" > "${KERNEL_DEFAULTS_FILE}.tmp"
          mv "${KERNEL_DEFAULTS_FILE}.tmp" "$KERNEL_DEFAULTS_FILE"
          echo "✅ 内核脚本修改成功"
        else
          echo "❌ 内核脚本文件不存在"
          exit 1
        fi

    - name: 创建自动安装脚本
      if: ${{ github.event.inputs.FIX_VERMAGIC == 'true' && env.VERMAGIC_STATUS == '✅ 已获取' }}
      run: |
        echo "🔧 创建自动安装脚本"
        
        cd ImmortalWrt
        CLEAN_VERSION=$(echo "${{ env.REPO_VERSION }}" | sed 's/^v//')
        KMODS_URL="src/gz immortalwrt_kmods https://mirrors.vsean.net/openwrt/releases/$CLEAN_VERSION/targets/${{ env.TARGET_PATH }}/kmods/${{ env.KERNEL_DIR }}"
        
        # 读取软件包列表
        if [ -f "$GITHUB_WORKSPACE/packages.txt" ]; then
            PACKAGES_LIST=$(grep -v '^#' "$GITHUB_WORKSPACE/packages.txt" | grep -v '^$' | tr '\n' ' ')
        else
            PACKAGES_LIST="luci-i18n-base-zh-cn luci-i18n-firewall-zh-cn wget-ssl curl"
        fi
        
        # 复制并配置自动安装脚本
        if [ -f "$GITHUB_WORKSPACE/auto-setup-init.sh" ]; then
            mkdir -p files/etc/init.d files/etc/rc.d
            cp "$GITHUB_WORKSPACE/auto-setup-init.sh" files/etc/init.d/auto-setup
            sed -i "s|KMODS_URL_PLACEHOLDER|$KMODS_URL|g" files/etc/init.d/auto-setup
            sed -i "s|PACKAGES_LIST_PLACEHOLDER|$PACKAGES_LIST|g" files/etc/init.d/auto-setup
            chmod +x files/etc/init.d/auto-setup
            ln -sf ../init.d/auto-setup files/etc/rc.d/S99auto-setup
            echo "✅ 自动安装脚本配置完成"
        fi

    - name: 加载自定义配置和脚本
      run: |
        # 复制 feeds 配置
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF ImmortalWrt/feeds.conf.default
        
        # 执行第一部分脚本
        chmod +x $DIY_P1_SH
        cd ImmortalWrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新并安装feeds
      run: |
        cd ImmortalWrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 配置和编译准备
      run: |
        echo "📋 配置和编译准备"
        
        # 复制设备配置
        cp ${{ env.CONFIG_FILE }} ImmortalWrt/.config
        
        # 设置LAN IP
        SET_IP="${{ github.event.inputs.LAN_IP }}"
        if [[ $SET_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          cd ImmortalWrt
          sed -i "s/192\.168\.[0-9]*\.[0-9]*/$SET_IP/g" package/base-files/files/bin/config_generate
          echo "IP_ADDR=$SET_IP" >> $GITHUB_ENV
          echo "✅ LAN IP 设置为: $SET_IP"
          cd ..
        fi
        
        # 执行第二部分脚本
        chmod +x $DIY_P2_SH
        cd ImmortalWrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 下载软件包并编译
      run: |
        cd ImmortalWrt
        make defconfig
        make download -j8
        find dl -size -1024c -delete
        echo "开始编译..."
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 整理和验证固件
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd ImmortalWrt/bin/targets/*/*
        rm -rf packages
        
        # 重命名固件文件
        for file in *; do
          if [[ -f "$file" ]]; then
            new_name="${{ env.FILE_DATE }}-${{ env.DEVICE_FULL_NAME }}-${file#*${{ env.DEVICE_NAME }}-}"
            mv "$file" "$new_name" 2>/dev/null || mv "$file" "${{ env.FILE_DATE }}-${{ env.DEVICE_FULL_NAME }}-$file"
          fi
        done
        
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        echo "固件文件:"
        ls -lh

    - name: 上传bin目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && github.event.inputs.UPLOAD_BIN_DIR == 'true'
      with:
        name: ImmortalWrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ImmortalWrt/bin

    - name: 上传固件到Artifacts
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && github.event.inputs.UPLOAD_FIRMWARE == 'true'
      with:
        name: ${{ env.FILE_DATE }}-${{ env.DEVICE_FULL_NAME }}-Firmware
        path: ${{ env.FIRMWARE }}

    - name: 发布到Release
      uses: softprops/action-gh-release@v2.1.0
      if: steps.organize.outputs.status == 'success' && github.event.inputs.UPLOAD_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ${{ env.FIRMWARE }}/*
        name: ${{ env.DEVICE_FULL_NAME }} - ${{ env.FILE_DATE }}
        tag_name: ${{ env.FILE_DATE }}-${{ env.DEVICE_FULL_NAME }}
        body: |
          # ${{ env.DEVICE_FULL_NAME }} 固件
          
          ## 固件信息
          - **设备**: ${{ env.DEVICE_FULL_NAME }}
          - **平台**: ${{ env.TARGET_PATH }}
          - **时间**: ${{ env.FILE_DATE }}
          - **登录**: ${{ env.IP_ADDR }}
          - **源码**: ${{ env.REPO_URL }}@${{ env.REPO_VERSION }}
        draft: false
        prerelease: false
