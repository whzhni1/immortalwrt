#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Fetch ImmortalWrt Config without Building
#

name: Fetch CMCC RAX3000M Config

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      upload_release:
        description: 'Upload config to Release'
        required: false
        default: 'true'
        type: boolean
  push:
    branches:
      - main
    paths:
      - 'part1.sh'
      - 'part2.sh'
      - '.config'
  schedule:
    - cron: 0 2 * * 5

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: part1.sh
  DIY_P2_SH: part2.sh
  UPLOAD_CONFIG: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  DEVICE_NAME: cmcc_rax3000m
  TARGET_NAME: mediatek-filogic

jobs:
  config:
    runs-on: ubuntu-22.04
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@main

    - name: Initialize Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -y \
          ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
          mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools \
          libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip \
          vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
        echo "============================="
        echo "Environment initialized"
        df -hT
        echo "============================="

    - name: Clone Source Code
      working-directory: /workdir
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        echo "============================="
        echo "Source code information:"
        echo "Branch: $(git branch --show-current)"
        echo "Commit: $(git log --oneline -1)"
        echo "============================="

    - name: Load Custom Feeds & DIY Part1
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        
        # 如果 part1.sh 不存在，创建默认的
        if [ ! -f $DIY_P1_SH ]; then
          echo "Creating default part1.sh..."
          cat > $DIY_P1_SH <<'EOF'
        #!/bin/bash
        # Add custom feed sources
        # sed -i 's/^#KATEX_INLINE_OPEN.*helloworldKATEX_INLINE_CLOSE/\1/' feeds.conf.default
        # echo 'src-git helloworld https://github.com/fw876/helloworld' >> feeds.conf.default
        # echo 'src-git passwall https://github.com/xiaorouji/openwrt-passwall' >> feeds.conf.default
        
        # Add custom packages
        git clone --depth=1 https://github.com/gdy666/luci-app-lucky package/lucky
        git clone --depth=1 https://github.com/destan19/OpenAppFilter package/OpenAppFilter
        
        echo "DIY Part1 completed!"
        EOF
        fi
        
        chmod +x $DIY_P1_SH
        cd openwrt
        echo "============================="
        echo "Running DIY Part1 script..."
        echo "============================="
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
        echo "============================="
        echo "Current feeds.conf.default:"
        cat feeds.conf.default
        echo "============================="

    - name: Update & Install Feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        echo "============================="
        echo "Feeds updated and installed"
        echo "============================="

    - name: Load Custom Config & DIY Part2
      run: |
        # 如果有自定义配置文件，使用它
        if [ -e $CONFIG_FILE ]; then
          echo "Using custom config file..."
          mv $CONFIG_FILE openwrt/.config
        else
          echo "No custom config found, generating for CMCC RAX3000M..."
          cd openwrt
          cat > .config <<EOF
        CONFIG_TARGET_mediatek=y
        CONFIG_TARGET_mediatek_filogic=y
        CONFIG_TARGET_mediatek_filogic_DEVICE_cmcc_rax3000m=y
        EOF
        fi
        
        # 如果 part2.sh 不存在，创建默认的
        if [ ! -f $DIY_P2_SH ]; then
          echo "Creating default part2.sh..."
          cat > $DIY_P2_SH <<'EOF'
        #!/bin/bash
        # Modify default settings
        # sed -i 's/192.168.1.1/192.168.2.1/g' package/base-files/files/bin/config_generate
        
        # Add custom packages to config
        # echo "CONFIG_PACKAGE_luci-app-lucky=y" >> .config
        # echo "CONFIG_PACKAGE_luci-app-oaf=y" >> .config
        
        echo "DIY Part2 completed!"
        EOF
        fi
        
        chmod +x $DIY_P2_SH
        cd openwrt
        echo "============================="
        echo "Running DIY Part2 script..."
        echo "============================="
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH Connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Generate Configuration
      id: generate
      run: |
        cd openwrt
        echo "============================="
        echo "Generating full configuration..."
        echo "============================="
        
        make defconfig
        
        # 获取设备信息
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*TARGET_.*_(.*)_DEVICE_.*=y/\1/' > TARGET_NAME
        [ -s TARGET_NAME ] && echo "TARGET_NAME=$(cat TARGET_NAME)" >> $GITHUB_ENV
        
        echo "FILE_DATE=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        
        echo "============================="
        echo "Device: ${{ env.DEVICE_NAME }}"
        echo "Target: ${{ env.TARGET_NAME }}"
        echo "============================="

    - name: Check Configuration
      run: |
        cd openwrt
        echo "============================="
        echo "Configuration Summary:"
        echo "============================="
        echo "Target Information:"
        grep '^CONFIG_TARGET_' .config | grep '=y' | head -10
        echo "============================="
        echo "Selected Packages (LuCI):"
        grep '^CONFIG_PACKAGE_luci' .config | grep '=y' | head -20
        echo "============================="
        echo "Custom Packages:"
        grep -E '^CONFIG_PACKAGE_.*(lucky|oaf|dockerman)' .config | grep '=y' || echo "No custom packages selected"
        echo "============================="

    - name: Generate Seed Config
      run: |
        cd openwrt
        ./scripts/diffconfig.sh > seed.config
        echo "============================="
        echo "Seed Configuration (diffconfig):"
        echo "============================="
        cat seed.config
        echo "============================="
        
        # 统计配置
        echo "Configuration Statistics:"
        echo "Total packages selected: $(grep -c '^CONFIG_PACKAGE_.*=y' .config)"
        echo "Total modules selected: $(grep -c '^CONFIG_.*MODULE.*=y' .config)"
        echo "============================="

    - name: Organize Config Files
      id: organize
      if: env.UPLOAD_CONFIG == 'true' && !cancelled()
      run: |
        cd openwrt
        mkdir -p $GITHUB_WORKSPACE/configs
        
        # 复制配置文件
        cp .config $GITHUB_WORKSPACE/configs/${{ env.FILE_DATE }}-${{ env.DEVICE_NAME }}-full.config
        cp seed.config $GITHUB_WORKSPACE/configs/${{ env.FILE_DATE }}-${{ env.DEVICE_NAME }}-seed.config
        cp feeds.conf.default $GITHUB_WORKSPACE/configs/feeds.conf.default
        
        # 复制 DIY 脚本
        [ -f $GITHUB_WORKSPACE/$DIY_P1_SH ] && cp $GITHUB_WORKSPACE/$DIY_P1_SH $GITHUB_WORKSPACE/configs/
        [ -f $GITHUB_WORKSPACE/$DIY_P2_SH ] && cp $GITHUB_WORKSPACE/$DIY_P2_SH $GITHUB_WORKSPACE/configs/
        
        # 生成信息文件
        cat > $GITHUB_WORKSPACE/configs/INFO.txt <<EOF
        ========================================
        ImmortalWrt Configuration Information
        ========================================
        Build Date: ${{ env.FILE_DATE }}
        Device: ${{ env.DEVICE_NAME }}
        Target: ${{ env.TARGET_NAME }}
        Source: ${{ env.REPO_URL }}
        Branch: ${{ env.REPO_BRANCH }}
        ========================================
        
        Files Description:
        - *-full.config: Complete configuration file with all options
        - *-seed.config: Minimal seed configuration (diffconfig)
        - feeds.conf.default: Feed sources configuration
        - part1.sh: DIY script before feeds update
        - part2.sh: DIY script after feeds update
        
        Usage:
        1. Copy the config file to your openwrt source directory
        2. Run 'make defconfig' to expand the configuration
        3. Run 'make menuconfig' for further customization
        4. Run 'make download' to download packages
        5. Run 'make -j$(nproc)' to build firmware
        ========================================
        EOF
        
        echo "FIRMWARE=$GITHUB_WORKSPACE/configs" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        
        echo "============================="
        echo "Config files organized:"
        ls -la $GITHUB_WORKSPACE/configs/
        echo "============================="

    - name: Upload Config to Artifacts
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.FILE_DATE }}-${{ env.DEVICE_NAME }}-configs
        path: ${{ env.FIRMWARE }}

    - name: Generate Release Tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        touch release.txt
        cat >> release.txt <<EOF
        ## 配置信息 | Configuration Info
        
        - **设备型号 | Device**: CMCC RAX3000M
        - **目标平台 | Target**: ${{ env.TARGET_NAME }}
        - **源码仓库 | Source**: ${{ env.REPO_URL }}
        - **源码分支 | Branch**: ${{ env.REPO_BRANCH }}
        - **生成时间 | Date**: ${{ env.FILE_DATE }}
        
        ## 文件说明 | Files Description
        
        | 文件名 | 说明 |
        |--------|------|
        | \`*-full.config\` | 完整配置文件 |
        | \`*-seed.config\` | 精简配置文件(diffconfig) |
        | \`feeds.conf.default\` | 软件源配置 |
        | \`part1.sh\` | 自定义脚本1 (feeds前) |
        | \`part2.sh\` | 自定义脚本2 (feeds后) |
        | \`INFO.txt\` | 配置信息说明 |
        
        ## 使用方法 | Usage
        
        \`\`\`bash
        # 使用完整配置
        cp *-full.config .config
        make defconfig
        
        # 或使用精简配置
        cp *-seed.config .config
        make defconfig
        \`\`\`
        EOF
        
        echo "release_tag=${{ env.FILE_DATE }}-${{ env.DEVICE_NAME }}-config" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload Config to Release
      uses: softprops/action-gh-release@v2.1.0
      if: steps.tag.outputs.status == 'success' && (github.event.inputs.upload_release == 'true' || github.event_name == 'push')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ${{ env.FIRMWARE }}/*
        name: ${{ env.FILE_DATE }}-${{ env.DEVICE_NAME }}-Config
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt

    - name: Delete Workflow Runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 3
        keep_minimum_runs: 5

    - name: Remove Old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.2
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 10
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
