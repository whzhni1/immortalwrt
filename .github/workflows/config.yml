name: Fetch ImmortalWrt Config for CMCC RAX3000M

on:
  workflow_dispatch:
  push:
    branches:
      - main
  schedule:
    - cron: '0 2 * * 5'  # 每周五凌晨2点执行

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  TZ: Asia/Shanghai
  DEVICE_TARGET: mediatek
  DEVICE_SUBTARGET: filogic
  DEVICE_PROFILE: cmcc_rax3000m

jobs:
  fetch-config:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Initialize Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -y \
          build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev \
          libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 \
          subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp \
          libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev \
          autoconf automake libtool autopoint device-tree-compiler g++-multilib \
          antlr3 gperf wget curl swig rsync
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone ImmortalWrt Source Code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH immortalwrt
        ln -sf /workdir/immortalwrt $GITHUB_WORKSPACE/immortalwrt
        cd immortalwrt
        echo "======================================"
        echo "ImmortalWrt source code cloned successfully"
        echo "Current branch: $(git branch --show-current)"
        echo "Latest commit: $(git log --oneline -1)"
        echo "======================================"

    - name: Load Custom Files
      run: |
        [ -e files ] && mv files immortalwrt/files
        chmod +x $GITHUB_WORKSPACE/*.sh 2>/dev/null || true

    - name: Run DIY Part1 Script (Add Custom Feeds & Packages)
      working-directory: ./immortalwrt
      run: |
        echo "======================================"
        echo "Running DIY Part1 Script..."
        echo "======================================"
        
        # 检查 part1.sh 是否存在
        if [ -f "$GITHUB_WORKSPACE/part1.sh" ]; then
          echo "Found part1.sh, executing..."
          
          # 显示原始 feeds.conf.default 内容
          echo "Original feeds.conf.default:"
          cat feeds.conf.default
          echo "======================================"
          
          # 复制脚本到工作目录并执行
          cp $GITHUB_WORKSPACE/part1.sh ./part1.sh
          chmod +x ./part1.sh
          
          # 执行脚本
          bash ./part1.sh
          
          # 显示修改后的 feeds.conf.default
          echo "======================================"
          echo "Modified feeds.conf.default:"
          cat feeds.conf.default
          echo "======================================"
          
          # 列出 package 目录中的新添加内容
          echo "Custom packages added:"
          ls -la package/ | grep -E "(lucky|OpenAppFilter|aliyundrive)" || echo "No custom packages found yet"
          echo "======================================"
        else
          echo "No part1.sh found, creating default one..."
          
          # 创建默认的 part1.sh 作为示例
          cat > $GITHUB_WORKSPACE/part1.sh <<'EOF'
        #!/bin/bash
        # DIY Part1 Script - Add custom feeds and packages before feeds update
        
        # Add custom feed sources
        # echo 'src-git helloworld https://github.com/fw876/helloworld' >> feeds.conf.default
        # echo 'src-git passwall https://github.com/xiaorouji/openwrt-passwall' >> feeds.conf.default
        # echo 'src-git passwall_packages https://github.com/xiaorouji/openwrt-passwall-packages' >> feeds.conf.default
        
        # Clone custom packages
        # git clone https://github.com/messense/aliyundrive-webdav package/aliyundrive-webdav
        git clone --depth=1 https://github.com/gdy666/luci-app-lucky package/lucky
        git clone --depth=1 https://github.com/destan19/OpenAppFilter package/OpenAppFilter
        
        # Uncomment a feed source
        # sed -i 's/^#KATEX_INLINE_OPEN.*helloworldKATEX_INLINE_CLOSE/\1/' feeds.conf.default
        
        echo "DIY Part1 script executed successfully!"
        EOF
          
          chmod +x $GITHUB_WORKSPACE/part1.sh
          bash $GITHUB_WORKSPACE/part1.sh
        fi

    - name: Update & Install Feeds
      working-directory: ./immortalwrt
      run: |
        echo "======================================"
        echo "Updating and installing feeds..."
        echo "======================================"
        
        # 更新所有 feeds
        ./scripts/feeds update -a
        
        # 显示可用的 feeds
        echo "Available feeds:"
        ./scripts/feeds list -n
        echo "======================================"
        
        # 安装所有 feeds
        ./scripts/feeds install -a
        
        # 如果有自定义包，尝试安装
        if [ -d "package/lucky" ]; then
          echo "Installing lucky package..."
          ./scripts/feeds install -a -p lucky || true
        fi
        
        if [ -d "package/OpenAppFilter" ]; then
          echo "Installing OpenAppFilter..."
          ./scripts/feeds install -a -p OpenAppFilter || true
        fi

    - name: Run DIY Part2 Script (Optional - After Feeds)
      working-directory: ./immortalwrt
      run: |
        # 检查是否有 part2.sh 脚本
        if [ -f "$GITHUB_WORKSPACE/part2.sh" ]; then
          echo "======================================"
          echo "Running DIY Part2 Script..."
          echo "======================================"
          cp $GITHUB_WORKSPACE/part2.sh ./part2.sh
          chmod +x ./part2.sh
          bash ./part2.sh
        else
          echo "No part2.sh found, skipping..."
        fi

    - name: Configure for CMCC RAX3000M
      working-directory: ./immortalwrt
      run: |
        # 检查是否存在 .config 文件
        if [ -f "$GITHUB_WORKSPACE/.config" ]; then
          echo "Found existing .config file, copying..."
          cp $GITHUB_WORKSPACE/.config .config
        else
          echo "No .config file found, generating for CMCC RAX3000M..."
          
          # 生成基础配置选择 CMCC RAX3000M
          cat > .config <<EOF
        CONFIG_TARGET_mediatek=y
        CONFIG_TARGET_mediatek_filogic=y
        CONFIG_TARGET_mediatek_filogic_DEVICE_cmcc_rax3000m=y
        
        # 添加基础 LuCI 支持
        CONFIG_PACKAGE_luci=y
        CONFIG_PACKAGE_luci-base=y
        CONFIG_PACKAGE_luci-compat=y
        CONFIG_PACKAGE_luci-lib-ipkg=y
        
        # 如果添加了自定义包，默认选中
        CONFIG_PACKAGE_luci-app-lucky=y
        CONFIG_PACKAGE_luci-app-oaf=y
        EOF
          
          # 让系统扩展配置
          make defconfig
          
          echo "======================================"
          echo "Configuration generated for CMCC RAX3000M"
          echo "======================================"
        fi

    - name: Display Custom Packages Status
      working-directory: ./immortalwrt
      run: |
        echo "======================================"
        echo "Custom Packages Status:"
        echo "======================================"
        
        # 检查自定义包是否在配置中
        echo "Checking configuration for custom packages..."
        
        if grep -q "CONFIG_PACKAGE_.*lucky" .config; then
          echo "✓ Lucky package found in config"
          grep "CONFIG_PACKAGE_.*lucky" .config
        else
          echo "✗ Lucky package not found in config"
        fi
        
        if grep -q "CONFIG_PACKAGE_.*oaf\|OpenAppFilter" .config; then
          echo "✓ OpenAppFilter found in config"
          grep "CONFIG_PACKAGE_.*oaf\|OpenAppFilter" .config || true
        else
          echo "✗ OpenAppFilter not found in config"
        fi
        
        echo "======================================"
        echo "Package directory contents:"
        ls -la package/ | tail -20
        echo "======================================"

    - name: Display Target Info
      working-directory: ./immortalwrt
      run: |
        echo "======================================"
        echo "Target Device Information:"
        echo "======================================"
        grep '^CONFIG_TARGET_' .config | grep '=y'
        echo "======================================"
        echo "Device Profile:"
        grep 'CONFIG_TARGET_PROFILE' .config || true
        grep 'DEVICE_cmcc_rax3000m' .config || true
        echo "======================================"

    - name: Download Package Sources
      working-directory: ./immortalwrt
      run: |
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Display Config Summary
      working-directory: ./immortalwrt
      run: |
        echo "======================================"
        echo "Configuration Summary:"
        echo "======================================"
        echo "Target Platform: MediaTek Filogic"
        echo "Device: CMCC RAX3000M"
        echo "======================================"
        echo "Core Packages:"
        grep '^CONFIG_PACKAGE_.*luci.*=y' .config | head -20 || true
        echo "======================================"
        echo "Custom Packages:"
        grep '^CONFIG_PACKAGE_.*lucky\|oaf\|aliyun.*=y' .config || echo "No custom packages enabled"
        echo "======================================"

    - name: Generate Seed Config
      working-directory: ./immortalwrt
      run: |
        # 生成 seed 配置（最小化配置）
        ./scripts/diffconfig.sh > seed.config
        echo "======================================"
        echo "Seed Config (Minimal Config):"
        echo "======================================"
        cat seed.config
        echo "======================================"

    - name: Upload Full Config
      uses: actions/upload-artifact@v4
      with:
        name: rax3000m-full-config-${{ github.run_number }}
        path: |
          immortalwrt/.config

    - name: Upload Seed Config
      uses: actions/upload-artifact@v4
      with:
        name: rax3000m-seed-config-${{ github.run_number }}
        path: |
          immortalwrt/seed.config

    - name: Upload DIY Scripts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: diy-scripts-${{ github.run_number }}
        path: |
          part1.sh
          part2.sh
          immortalwrt/feeds.conf.default

    - name: Organize Config Files
      working-directory: ./immortalwrt
      run: |
        mkdir -p $GITHUB_WORKSPACE/configs
        cp .config $GITHUB_WORKSPACE/configs/rax3000m-full.config
        cp seed.config $GITHUB_WORKSPACE/configs/rax3000m-seed.config
        cp feeds.conf.default $GITHUB_WORKSPACE/configs/feeds.conf.default
        
        # 复制 DIY 脚本
        [ -f "$GITHUB_WORKSPACE/part1.sh" ] && cp $GITHUB_WORKSPACE/part1.sh $GITHUB_WORKSPACE/configs/
        [ -f "$GITHUB_WORKSPACE/part2.sh" ] && cp $GITHUB_WORKSPACE/part2.sh $GITHUB_WORKSPACE/configs/
        
        # 创建配置信息文件
        cat > $GITHUB_WORKSPACE/configs/README.md <<EOF
        # CMCC RAX3000M Configuration Files
        
        ## Device Information
        - **Device**: CMCC RAX3000M
        - **Target**: MediaTek Filogic
        - **Branch**: ${{ env.REPO_BRANCH }}
        - **Generated**: $(date +"%Y-%m-%d %H:%M:%S")
        
        ## Files
        - **rax3000m-full.config**: Complete configuration file
        - **rax3000m-seed.config**: Minimal seed configuration (diffconfig)
        - **feeds.conf.default**: Feed sources configuration
        - **part1.sh**: DIY script for adding custom feeds and packages
        - **part2.sh**: DIY script for post-feed configurations (if exists)
        
        ## Custom Packages Added
        $(ls -1 package/ | grep -E "(lucky|OpenAppFilter|aliyundrive)" || echo "- No custom packages")
        
        ## Usage
        
        ### Using Full Config:
        \`\`\`bash
        cp rax3000m-full.config .config
        make defconfig
        \`\`\`
        
        ### Using Seed Config:
        \`\`\`bash
        cp rax3000m-seed.config .config
        make defconfig
        \`\`\`
        
        ### Using DIY Scripts:
        \`\`\`bash
        # Before feeds update
        bash part1.sh
        
        # Update feeds
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        # After feeds (optional)
        bash part2.sh
        \`\`\`
        EOF
        
        echo "======================================"
        echo "Config files organized:"
        ls -la $GITHUB_WORKSPACE/configs/
        echo "======================================"

    - name: Upload All Configs Bundle
      uses: actions/upload-artifact@v4
      with:
        name: rax3000m-configs-bundle-${{ github.run_number }}
        path: configs/
        retention-days: 30

    - name: Check Config Validity
      working-directory: ./immortalwrt
      run: |
        echo "======================================"
        echo "Checking configuration validity..."
        echo "======================================"
        
        # 检查关键配置是否存在
        if grep -q "CONFIG_TARGET_mediatek=y" .config && \
           grep -q "CONFIG_TARGET_mediatek_filogic=y" .config && \
           grep -q "CONFIG_TARGET_mediatek_filogic_DEVICE_cmcc_rax3000m=y" .config; then
          echo "✓ Configuration is valid for CMCC RAX3000M"
        else
          echo "✗ Configuration validation failed!"
          echo "Missing required target configuration"
          exit 1
        fi

    - name: Delete Old Workflow Runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 7
        keep_minimum_runs: 5
